<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>编辑器之神Vim</title>
      <link href="/2025/06/02/bian-ji-qi-zhi-shen-vim/"/>
      <url>/2025/06/02/bian-ji-qi-zhi-shen-vim/</url>
      
        <content type="html"><![CDATA[<p>@[toc]</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>终于到了主包最期待的环节了<br><a href="https://pic1.imgdb.cn/item/683d774058cb8da5c824e4f4.png"><img src="https://pic1.imgdb.cn/item/683d774058cb8da5c824e4f4.png" alt="老牛逼的一个编辑器"></a></p><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>这是linux中最能装逼的一个环节<br>服务器哪有界面版的，都是纯粹的命令行<br>这个时候操作就比较复杂，需要使用一些另类的编辑器<br>介绍几个编辑器吧<br><code>vi nano emacs vim</code>，这些都是命令版的编辑器，基本是后两个使用的比较多<br>这两个有传奇的称号<br><code>emacs</code>神之编辑器<br><code>vim</code>编辑器之神<br>这个不是初学者想学就学的，最重要的是适应<br>插件只是方便开打<br>牛逼的人写代码都是没有提示的<br>vim写代码是没有提示的，那确实叼<br>业界有个说法，牛逼的人都让工具变得越来越难用<br>vim虽然难，但是学会之后卧槽，其他的编辑器都是垃圾<br>在<code>CentOS</code>上可能显示的是<code>vi</code></p><h2 id="Vim的简单使用"><a href="#Vim的简单使用" class="headerlink" title="Vim的简单使用"></a>Vim的简单使用</h2><p>入门的简单，但是使用的时候比较麻烦<br>Vim有两种操作模式<br><code>普通模式（命令操作模式）</code>操作文件<br><code>插入模式</code>就是编辑<br>拿记事本举例<br><img src="https://pic1.imgdb.cn/item/683d776e58cb8da5c824e63c.png"><br>这样保存等步骤操作文件的时候就是普通模式<br>编辑文件内容的时候就是插入模式<br><code>insert i</code>也就是i键，当你点击<code>i</code>键的时候就是插入模式<br><img src="https://pic1.imgdb.cn/item/683d778e58cb8da5c824e72e.png"><br>想要保存的时候就点<code>Esc</code>，然后输入英文的<code>:</code>然后输入<code>wq</code>，这个意思就是保存<code>w</code>然后退出<code>q</code><br>点完<code>Esc</code>之后，右下角的<code>INSERT</code>就消失了</p><h2 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h2><p>如何来移动光标呢？<br>程序员在编程的时候，有时候会需要移动一下鼠标，或者够一下右下角的方向键<br>但是这样太麻烦了，而且会有很多的耗费时间<br>Vim之所以被称为编辑器之神，就是会把程序员的双手放到键盘的右半部分<br>为了解决这个问题，在普通模式下<br><code>h</code>，<code>j</code>，<code>k</code>，<code>l</code>这四个键来控制，但是这几个只能移动一格格子，但是这样做太蠢了</p><h2 id="翻页"><a href="#翻页" class="headerlink" title="翻页"></a>翻页</h2><p>可以使用<code>pageup</code>，<code>pagedown</code>来翻页，但是这样又到了离开了键盘<br>使用快捷键<code>ctrl + F</code>向下移，<code>ctrl + B</code>向下移<br>也可以使用<code>ctrl + E</code>是向下移动，这个向下移动还包含了加换行符，和<code>ctrl + Y</code>是向上移动，这样是翻一点点的感觉<br>如果想要移动到最后一行<code>G</code>，注意vim当中的命令是分小写和大写的，所以这里的大G意味着要使用<code>shift + G</code><br>如果想要移动到最开始的时候<code>gg</code>，就需要使用两下小写<code>g</code><br>这样的模式都是普通模式<br>输入<code>:</code>冒号之后就是另外一种模式了<br>有时候不小心修改源代码了那就输入<code>:q!</code>，这个意思就是不保存</p><h2 id="不同的方式编辑文本以及跳跃单词"><a href="#不同的方式编辑文本以及跳跃单词" class="headerlink" title="不同的方式编辑文本以及跳跃单词"></a>不同的方式编辑文本以及跳跃单词</h2><p>插入模式的话是插入到前面<br><img src="https://pic1.imgdb.cn/item/683d77a658cb8da5c824e800.png"><br>举个例子，是插入到<code>，</code>的前面<br><code>i</code>是在光标位置的前面插入<br><code>a</code>是在光标位置的后面插入，但是主包实测光标往后跳了一格，实际上也是<code>i</code>的模式，直接用<code>i</code>就行<br>还有一种如果我想再开一行再写怎么办呢？<br><code>o</code>就可以直接新开一行，然后到新的这一行去输入，光标在这一行的哪里都可以，只要点<code>o</code>就行<br><img src="https://pic1.imgdb.cn/item/683d77b458cb8da5c824e87b.png"><br>这不就直接跳过来了，但是注意这个只有在普通模式的时候才可以开下一行，如果是插入模式的话实际上是正常输入的<br><code>x</code>是删除当前光标所在的字符，这个同样需要在普通模式下进行，但是这个删除之后仍停留在普通模式<br><code>dd</code>点两下，直接就是把这一行干掉了<br><code>u</code>撤销，代替了<code>ctrl + z</code><br><code>dw</code>就是移除当前所在光标往后的单词，这样做的话需要移动到当前单词的首字母<br><code>b</code>跨越单词的移动，向前跳跃单词，这个是跳到了单词的前面<br><code>e</code>跨越单词的移动，向后跳跃单词，这个是跳到了单词的末尾<br>如果<br>所以当光标移动到中间的时候，按下这两个键就可以实现移动到开头或者末尾<br><code>w</code>也是跳跃单词，这个是往后跳跃到单词的首字母，感觉<code>w</code>使用的会更广泛一点<br>假如我光标后面的东西都不想要了怎么办<br><code>shift + w</code>就是大跳，<code>w</code>跳的太慢了，跳跃的是大单词<br><code>shift + b</code>，<code>shift + e</code>同理</p><h2 id="跳跃行首行尾"><a href="#跳跃行首行尾" class="headerlink" title="跳跃行首行尾"></a>跳跃行首行尾</h2><p>既然可以按照单词来跳跃，那么就可以按照行来进行跳跃<br><code>shift + 6</code>就代表的是跳跃本行的开头<br><code>shift + 4</code>就代表的是跳跃本行的末尾<br><code>0</code>的话是直接跳到本行的开头，这就是tab前面的内容，这个把空白字符包含了，前面两行是只能跳跃到有字的部分<br><code>r</code>替换字符，这个可以把光标选中的字符进行替换，之后按下要替换为的字符<br><code>R</code>就是一直替换，直到按下<code>Esc</code>键退出为止<br>在Vim中尽量不要使用退格键<code>Backspace</code>和<code>delete</code>，因为有可能会有一些命令和这些键是绑定的，不是你想的那样<br><code>&#123;</code>和<code>&#125;</code>可以进行代码中段落的跳跃，也就是代码块那样的东西</p><h2 id="复制剪切粘贴"><a href="#复制剪切粘贴" class="headerlink" title="复制剪切粘贴"></a>复制剪切粘贴</h2><p>vim有一个缓冲区，会记录你复制剪切粘贴过的东西<br><code>p</code>就是把你刚刚操作过的东西，在粘回来，这样的话vim里面的剪切的实现逻辑就是删除，然后再从缓冲区里面贴出来<br>复制就是另一回事了<br><code>yw</code>这个意思就是复制这个单词，感觉就像是鼠标双击一样<br><code>y$</code>表示从当前开始一直复制到行末尾，之后使用<code>p</code>就可以释放出来<br>但是有个坏处就是你不知道你复制了什么东西，如果有一行特别长的话，你不知道他到底复制到哪了<br>那么如何解决这个问题呢？</p><h2 id="Visual可视化模式"><a href="#Visual可视化模式" class="headerlink" title="Visual可视化模式"></a>Visual可视化模式</h2><p>为了解决这个问题，就用上了可视化模式<br>这下可以吹牛逼说vim有四种模式了hhhhhh<br><img src="https://pic1.imgdb.cn/item/683d77c358cb8da5c824e8bd.png"></p><p><code>v</code>按<code>v</code>键，就会出现一个<code>VISUAL</code>，这个时候就可以使用<code>hjkl</code>进行选择了，选好之后点<code>y</code>，然后再按<code>p</code>，这样就能知道自己到底复制了什么玩意了<br><code>V</code>这个是按行来的，直接一次就是一行，显然<code>v</code>更灵活一点<br>那就有问题了，如果我想把所有的代码删了怎么办<br>要先进入首行<code>g</code>，<code>v + G</code>直接跳到末尾，然后按<code>d</code>就全删掉了，这就像一种全选然后删除的功能<br>这里<code>v</code>配合<code>d</code>就能删除选中的内容<br>选好一段内容之后，我想继续接着选怎么办<code>o</code>，这样就是跳到开头，再按一下<code>o</code>，就又跳到了末尾，可以使用<code>oooooooooo</code>，来回跳，卧槽有点搞笑hhhhhh<br>在可视化模式当中，可以使用所有上述的命令，随便你怎么跳<br>可以选中之后再按<code>y</code>就是复制选中内容<br><code>ctrl + c</code>是选中每一行<br><code>ctrl + v</code>是一种矩阵选择<br>在选中过程中<code>0</code>就是补全角落，把你没复制到的角落给你复制上</p><h2 id="视图模式中的其他模式"><a href="#视图模式中的其他模式" class="headerlink" title="视图模式中的其他模式"></a>视图模式中的其他模式</h2><p>如果我要把这一行缩进怎么办，或者是全选然后缩进<br>那就是使用<code>v</code>把这些全部选中，然后加上<code>&lt;&gt;</code>就是缩进，这两个分别是向前缩进和向后缩进<br><code>v</code>选中之后<code>~</code>就是大小写翻转<br><code>v + U</code>，把选中的内容全部变成大写的<br><code>v + u</code>，把选中的内容全部变成小写的</p><h2 id="查找和替换"><a href="#查找和替换" class="headerlink" title="查找和替换"></a>查找和替换</h2><p>也就是<code>ctrl + f</code><br>光标移到哪？就是从哪里开始查<br>输入一个<code>\</code>然后输入所要查询的单词，然后就跳到了要查询的单词<br>这样我想继续往下查该怎么办，那就是<code>n</code>就是一直查下一个<br>找到之后我想替换怎么办呢？<br>输入<code>:s/const/let/g</code>这样的意思就是<code>:s</code>是开始替换<code>/const</code>是要替换的内同<code>/let</code>是要替换成的内容<code>/g</code>是把这一行中的<code>const</code>全部替换<br>如果是替换整个文件的<code>const</code>该怎么做？<code>:%s</code>，换成了百分比，这样就给你文本里面的直接替换了<br>如果选择行号去替换该怎么办<br><code>:set number</code>就可以临时显示行号<br><img src="https://pic1.imgdb.cn/item/683d77ce58cb8da5c824e912.png"><br>就会出现这样的效果<br>如果我只想把某两行之间的<code>const</code>进行替换，其他的不变<br><code>:2,15s/const/let/g</code>后面的一样，这个意思就是把第2到15行的所有const都替换掉了<br>还有一种是有提示的替换<code>:s/const/let/gc</code>，这个就是一直往下查找，然后问问你确定要替换吗？然后你需要点y或者n，然后他会跳到下一个继续问你，或者替换完了就退出</p><h2 id="Vim中的基础配置"><a href="#Vim中的基础配置" class="headerlink" title="Vim中的基础配置"></a>Vim中的基础配置</h2><p>Vim也是可以去配置的，包括主题，颜色乱七八糟的<br>要想配置vim的话必须去自己配置一个vim的配置文件<br>在<code>/home/yangyeyuan</code>下面使用<code>touch .vimrc</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set syntax=on</span><br><span class="line">set tabstop=3</span><br><span class="line">set softtabstop=4</span><br><span class="line">set number</span><br><span class="line">set enc=utf-8</span><br><span class="line">set showmatch</span><br></pre></td></tr></table></figure><p>常用的配置可以上github上去搜索，重要的是会编写代码，而不是会配置文件，了解一下就可以<br>vim中也有一些插件，整花里胡哨的插件有啥用，得会写才行<br>话说主包得把主包的idea更新一下了<br>配置好这个文件之后需要使用<code>source .vimrc</code>来更新一下<br>跳跃到哪一行？<code>55gg</code>就直接调到了第55行</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p><code>v + aw</code>就是快速选中光标所在的单词<br><code>v + ab</code>把复制单词所在的小括号全部内容<br><code>v + aB</code>就是复制单词所在的大括号全部内容<br><code>v + a&lt;</code>就是选中尖括号<code>&lt;&gt;</code><br><br><br>主包需要补充一些有用的快捷键了<br>这么多，主包这能知道啊，只能说是慢慢补充了<br>Vim也是根据个人习惯而言<br>好的代码和插件可以提高你的效率，但是并不能提高你的水准<br>不要让工具毁了你，不能变成过于依赖插件的人<br>只有用记事本编辑，才能变成最后的大佬hhhhhhhhh<br><br><br><br><br>micro_frank</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>README</title>
      <link href="/2025/06/02/readme/"/>
      <url>/2025/06/02/readme/</url>
      
        <content type="html"><![CDATA[<p>This is the README file for the blog.</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
